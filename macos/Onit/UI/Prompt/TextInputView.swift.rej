diff a/macos/Onit/UI/Prompt/TextInputView.swift b/macos/Onit/UI/Prompt/TextInputView.swift	(rejected hunks)
@@ -20,6 +20,7 @@ struct TextInputView: View {
     @Default(.mode) var mode
     
     @State private var textHeight: CGFloat = 20
+    @State private var isProcessingURL: Bool = false
     private let maxHeightLimit: CGFloat = 100
 
     var body: some View {
@@ -52,9 +53,25 @@ struct TextInputView: View {
             .frame(height: min(textHeight, maxHeightLimit))
             .onAppear { focused = true }
             .onChange(of: model.textFocusTrigger) { focused = true }
+            .onChange(of: model.pendingInstruction) { oldValue, newValue in
+                // Check for URLs when text changes
+                if !isProcessingURL && !newValue.isEmpty {
+                    Task {
+                        await checkForURLs()
+                    }
+                }
+            }
         }
         .appFont(.medium16)
         .foregroundStyle(.white)
+        .overlay(alignment: .topTrailing) {
+            if isProcessingURL {
+                ProgressView()
+                    .scaleEffect(0.7)
+                    .padding(.trailing, 8)
+                    .padding(.top, 4)
+            }
+        }
     }
 
     var placeholderText: String {
@@ -76,6 +93,30 @@ struct TextInputView: View {
             "New instructions..."
         }
     }
+    
+    /// Checks for URLs in the pending instruction and processes them
+    func checkForURLs() async {
+        guard !model.pendingInstruction.isEmpty else { return }
+        
+        // Set processing state
+        await MainActor.run {
+            isProcessingURL = true
+        }
+        
+        // Process text for URLs
+        let (processedText, foundURLs) = await WebContentContext.processTextForURLs(
+            text: model.pendingInstruction, 
+            model: model
+        )
+        
+        // Update UI with processed text if URLs were found
+        await MainActor.run {
+            if foundURLs {
+                model.pendingInstruction = processedText
+            }
+            isProcessingURL = false
+        }
+    }
 
     func sendAction() {
         let inputText = model.pendingInstruction.trimmingCharacters(in: .whitespacesAndNewlines)
@@ -83,7 +124,23 @@ struct TextInputView: View {
         // Add empty check
         guard !inputText.isEmpty else { return }
         
-        model.createAndSavePrompt()
+        // Final URL check before sending
+        if !isProcessingURL {
+            Task {
+                await checkForURLs()
+                await MainActor.run {
+                    model.createAndSavePrompt()
+                }
+            }
+        } else {
+            // If we're still processing, wait a bit and then send
+            Task {
+                try? await Task.sleep(nanoseconds: 500_000_000) // 0.5 seconds
+                await MainActor.run {
+                    model.createAndSavePrompt()
+                }
+            }
+        }
     }
 
     var sendButton: some View {
@@ -98,7 +155,7 @@ struct TextInputView: View {
                 .frame(width: 18, height: 18)
         }
         .buttonStyle(.plain)
-        .disabled(model.pendingInstruction.isEmpty)
+        .disabled(model.pendingInstruction.isEmpty || isProcessingURL)
         .keyboardShortcut(.return, modifiers: [])
     }
 
